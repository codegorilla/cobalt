
//public static val x: int;

//var alpha: *(*int)[1] = 1.5 + 2/4 - 10;

static var alpha: *(*int)[1] = (1.5 + 2)/4;

var beta: Token[int, float] = 5;

static const def myfun (x: *int, y: float) -> int {
  // Do something
  break;
  continue;
  var t: int = 1;;
  var u: float = 1;
  1 + 2 * -3.14;
  return 1.5;

  until (1 < 10)
    break;

  if (1 < 10) {
    1 + 2;
    break;
  } else {
    3 + 4;
    continue;
  }

}

private final class Token {

  var x: int = 0;
  var y: int = 1;

  def init (x: int) {
    while (1 < 10) {
      1 + 2;
      break;
      return 10;
    }
  }

  def add (t: *float[1]) -> float64 {
    2 + 2;
  }

}


//class Token {

//  var kind: int;
//  var lexeme: String;
//  var position: int;
//  var line: int;
//  var column: int;

//}

//enum TokenKind {
//  val DEF;
//  val VAL;
//  val VAR;
//}

//template [T]
//def sort (x: int, y: int) {
//}

//template [T]
//class List {
//}

